.TH PDPMAKE 1 "18 June 2024" "Ron Yorston" "Usage Manual"
.SH NAME
.B pdpmake
\(en public domain POSIX make
.SH SYNOPSIS

\fBpdpmake\fP
.RB [ --posix ]
.RB [ -ehiknpqrSst ]
.RB [ -C
.IR dir ]
.RB [ -f
.IR file ]
.RB [ -j
.IR num_jobs ]
.RB [ -x \ \fIpragma\fP]
.RI [ macro [:[:[:]]]= value \0...]
.RI [ target \0...]

.SH DESCRIPTION

The
.B pdpmake
utility creates or updates files following a set of rules. The created or
updated files, called targets, are typically derived from other files, called
prerequisites. Targets are described by rules which list commands to be
executed. Rules may be inferred by the utility or explicitly defined in one or
more files. A target may also depend on other targets, whose rules must be
executed before its. Files which contain these targets are known as makefiles.
.SH OPTIONS

.IP \fB--posix\fP
Enable strict POSIX-compliant mode. This option must be the first given on the
command line.
.IP \fB-C\fP\ \fIdir\fP
Before execution, switch to
.IR dir .
If specified multiple times, each invocation is interpreted relative to the
previous one:
\(oq\fB-C\fP
/
.B -C
etc\(cq is equivalent to
\(oq\fB-C\fP /etc\(cq.
.IP \fB-e\fP
Allow environment variables to override macro assignments.
.IP \fB-f\fP\ \fIfile\fP
Specify a makefile
.I file
from which to read. If invoked multiple times, specified files are read in order
of invocation. See
.B INPUT FILES
section.
.IP \fB-h\fP
Display help information.
.IP \fB-i\fP
If commands in rules exit unsuccessfully, ignore them and continue. This
option is equivalent to specifying the special target
.B .IGNORE
without prerequisites.
.IP \fB-j\fP\ \fInum_jobs\fP
Ignored. Exists for compatibility with other
.BR make (1)
implementations.
.IP \fB-k\fP
If an error is encountered, continue processing rules. Recipes for targets which
depend on other targets that have caused errors are not executed.
.IP \fB-n\fP
Print without executing commands that are not prefixed with \(oq+\(cq.
.IP \fB-p\fP
Print macro definitions and rules during execution.
.IP \fB-q\fP
If specified targets are up to date, exit successfully. Otherwise, exit with an
error code of 1. Do not execute any rules.
.IP \fB-r\fP
Do not use the built-in rules. Clear the suffix list.
.IP \fB-S\fP
Stop processing if an error is encountered. This is the default behaviour and
the opposite of
.BR -k .
.IP \fB-s\fP
Do not print commands as they are executed. This is equivalent to using the
special target
.B .SILENT
without prerequisites.
.IP \fB-t\fP
Instead of executing rules, touch target files. Ignores targets that are
up-to-date or those which have no rules specified.
.IP \fB-x\fP\ \fIpragma\fP
Allow certain extensions when using strict POSIX-compliant mode. For a list of
supported pragmas, see the
.B PRAGMAS
section. This option may be specified more than once to utilize multiple
extensions.
.IP \fImacro\fP[:[:[:]]]=\fIvalue\fP
Assign
.I value
to
.IR macro ,
overriding the value of
.I macro
in the input if it exists. Macro assignments and targets may be mixed on the
command line. Assignments will be processed before targets.
.SH INPUT FILES

If an input makefile is unspecified, the working directory will be searched for
a file named either \(oqmakefile\(cq or \(oqMakefile\(cq, the former taking
priority over the latter.

If the input file is \(oq-\(cq, the standard input shall be used as the input.
.SH PRAGMAS

While in strict POSIX-compliant mode, pragmas may be utilized to selectively
enable certain extensions.

.IP \fBmacro_name\fP
Allow \(oq-\(cq in macro names.
.IP \fBtarget_name\fP
Allow \(oq-\(cq and \(oq/\(cq in target names.
.IP \fBcommand_comment\fP
Don't treat the \(oq#\(cq character as introducing a comment in commands or in
target and inference rules.
.IP \fBempty_suffix\fP
Permit an empty suffix in macro expansions. This takes the form of $(VAR:=.c).
.IP \fBposix_2017\fP
Enforce the old POSIX.1-2017 standard.
.IP \fBposix_2024\fP
Enforce the current POSIX.1-2024 standard. In this case the
.B macro_name
and
.B target_name
pragmas aren\(cqt required as this standard allows these additional characters.
.IP \fBposix_202x\fP
An alias for the
.B posix_2024
pragma.
.IP \fBwindows\fP
Allow Microsoft Windows-style paths as target names. This may also require
specifying the
.B target_name
pragma.
.SH STANDARDS

This utility follows the
.I Section 12.2, Utility Syntax Guidelines
of the POSIX.1-2024 standard for the
.B make
utility.

The behavior in this utility should match the behavior described in this
section but also includes a set of extensions. Its behavior may be fine-tuned
using command line options, environment variables, or special targets. See the
.B PRAGMAS
section.

By default, all extensions are enabled. The following list contains all of the
methods for disabling all extensions and enabling strict POSIX-compliant mode:
.RS
.IP \(bu 3
Add the special target
.B .POSIX
as the first non-comment line in the first input to be processed. This is the
standard approach for declaring a makefile to be POSIX-compliant.
.IP \(bu 3
Add the
.B --posix
flag as the first command line option given to
.BR pdpmake .\ This
flag is unique to
.B pdpmake
and may not be available in other
.BR make (1)
implementations.
.IP \(bu 3
Set the
.B PDPMAKE_POSIXLY_CORRECT
environment variable to any value. This environment variable is unique to
.B pdpmake
and may not be available in other
.BR make (1)
implementations.
.RE

A set of extensions to the POSIX standard are implemented for this
utility. These may be compatible with other
.BR make (1)
implementations. The available extensions are:
.RS
.IP \(bu 3
The
.B -C
directory command line option changes the current working directory.
.IP \(bu 3
Double-colon rules are allowed.
.IP \(bu 3
The conditional keywords
.BR ifdef ,
.BR ifndef ,
.BR ifeq ,
.BR ifneq ,
.BR else ,\ and
.B endif
are implemented.
.IP \(bu 3
Archive members can be specified using the form
.BR lib.a (mem1.o\ mem2.o...).
.IP \(bu 3
The macro assignment operator
.B :=
is implemented. It is equivalent to the POSIX-specified
.BR ::=
macro assignment operator.
.IP \(bu 3
Chained inference rules can be used when searching for the prerequisites of a
target. This means that if there are inference rules
.I .p.q
and
.I .q.r
and the file
.I thing.p
exists, the method by which the file
.I thing.r
is created can be deduced.
.IP \(bu 3
The wildcards \(oq*\(cq, \(oq?\(cq and \(oq[]\(cq can be used in the targets
and prerequisites of target rules.
.IP \(bu 3
The \(oq#\(cq character on a command line or in a macro expansion doesn\(cqt
indicate the start of a comment. In other locations, \(oq#\(cq can be escaped by
preceding it with a backslash.
.IP \(bu 3
Duplicated prerequisites are removed when the internal macro
.B $?
is expanded.
.IP \(bu 3
An
.B include
line with no files specified is silently ignored. At least one blank must follow
the
.B include for the line to
be valid.
.IP \(bu 3
The shell used to process build commands isn\(cqt started with the
.B -e
option when errors aren\(cqt being ignored.
.IP \(bu 3
Macro definitions and targets may be mixed on the command line. The macro
definitions are processed first, then the targets.
.IP \(bu 3
The
.B $<
and
.B $*
internal macros are given values in target rules.
.IP \(bu 3
When a build command receives a signal, the target is removed.
.RE

The following implementation details apply only to the POSIX.1-2024 standard:
.RS
.IP \(bu 3
Nested macro expansion syntax: $(FOO$(BAR))
.IP \(bu 3
Prerequisites of the
.B .PHONY
special target are always considered out-of-date.
.IP \(bu 3
More than one file can be specified on each include line.
.IP \(bu 3
Missing include files can be ignored by using
.B -include
.I file
instead of
.B include
.IR file .
.IP \(bu 3
Missing or out-of-date include files are rebuilt if an appropriate
rule can be found.
.IP \(bu 3
The
.B $^
and
.B $+
internal macros evaluate to all prerequisites of the current target (not just
out-of-date ones, as with
.BR $?).
.B $^
removes duplicated prerequisites from the list,
.B $+
doesn\(cqt.
.IP \(bu 3
If no
.B MAKE
environment variable is provided the
.B MAKE
macro is initialised from argv[0], with a relative path converted to absolute.
.IP \(bu 3
The
.BR ::= ,
.BR :::= ,
.BR += ,
.BR ?= ,
and
.BR !=
macro assignments.
.IP \(bu 3
Pattern macros extend the standard suffix substitution in macro expansion to
allow changes to prefixes.
.IP \(bu 3
An escaped newline within a macro expansion in a rule is replaced by a space.
.IP \(bu 3
The
.B CURDIR
macro is set to the current directory during program start up.
.SH COPYRIGHT

.B pdpmake
is free and unencumbered software released into the public domain. See
<https://unlicense.org>.
.SH SEE ALSO
.BR make (1p)
